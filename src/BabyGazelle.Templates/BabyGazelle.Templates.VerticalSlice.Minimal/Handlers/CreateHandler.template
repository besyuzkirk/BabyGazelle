using FluentValidation;

namespace {Namespace}.{EntityName}.Create{EntityName}
{
    public record Create{EntityName}Command({FieldDefinitions})
        : ICommand<Create{EntityName}Result>;

    public record Create{EntityName}Result(Guid Id);

    public class Create{EntityName}CommandValidator : AbstractValidator<Create{EntityName}Command>
    {
        public Create{EntityName}CommandValidator()
        {
            {ValidationRules}
        }
    }

    internal class Create{EntityName}CommandHandler(IDocumentSession session)
        : ICommandHandler<Create{EntityName}Command, Create{EntityName}Result>
    {
        public async Task<Create{EntityName}Result> Handle(Create{EntityName}Command command, CancellationToken cancellationToken)
        {
            var entity = new {EntityName}
            {
                {EntityFieldAssignments}
            };

            session.Store(entity);
            await session.SaveChangesAsync(cancellationToken);

            return new Create{EntityName}Result(entity.Id);
        }
    }
}
